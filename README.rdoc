== README

This example will demonstrate how to use ActiveSupport::MessageEncryptor to encrypt / decrypt database attributes. A use case has also been implemented in this application which shows how this method can be used to password protect 'Article' posts. Though this implementation has been slimmed down and uses 'BasicAuth' for access validation, this example can be easily customized at the controller level to handle redirects, errors, messages etc.

* http://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html

* Another approach: https://github.com/johanns/sha3

* The inspiration for this demo: http://vesavanska.com/2013/signing-and-encrypting-data-with-tools-built-in-to-rails/

###################################################################################

* rails c
* key = ActiveSupport::KeyGenerator.new('1234567890').generate_key('1234567890')
* crypt = ActiveSupport::MessageEncryptor.new(key, digest: "SHA384")
* encrypted_password = crypt.encrypt_and_sign('mydummypassword')
* decrypted_password = crypt.decrypt_and_verify(encrypted_password)

